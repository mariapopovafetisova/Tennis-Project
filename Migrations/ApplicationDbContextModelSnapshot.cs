// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tennis.Data;

#nullable disable

namespace Tennis.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tennis.Models.CheckBoxModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<int?>("ListErrorId")
                        .HasColumnType("int");

                    b.Property<int?>("ListErrorId1")
                        .HasColumnType("int");

                    b.Property<int?>("ListErrorId10")
                        .HasColumnType("int");

                    b.Property<int?>("ListErrorId2")
                        .HasColumnType("int");

                    b.Property<int?>("ListErrorId3")
                        .HasColumnType("int");

                    b.Property<int?>("ListErrorId4")
                        .HasColumnType("int");

                    b.Property<int?>("ListErrorId5")
                        .HasColumnType("int");

                    b.Property<int?>("ListErrorId6")
                        .HasColumnType("int");

                    b.Property<int?>("ListErrorId7")
                        .HasColumnType("int");

                    b.Property<int?>("ListErrorId8")
                        .HasColumnType("int");

                    b.Property<int?>("ListErrorId9")
                        .HasColumnType("int");

                    b.Property<int>("SharedId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ListErrorId");

                    b.HasIndex("ListErrorId1");

                    b.HasIndex("ListErrorId10");

                    b.HasIndex("ListErrorId2");

                    b.HasIndex("ListErrorId3");

                    b.HasIndex("ListErrorId4");

                    b.HasIndex("ListErrorId5");

                    b.HasIndex("ListErrorId6");

                    b.HasIndex("ListErrorId7");

                    b.HasIndex("ListErrorId8");

                    b.HasIndex("ListErrorId9");

                    b.ToTable("CheckBoxModel");
                });

            modelBuilder.Entity("Tennis.Models.ErrorsFP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("FirstPlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("game")
                        .HasColumnType("int");

                    b.Property<int>("point")
                        .HasColumnType("int");

                    b.Property<int?>("set")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstPlayerId");

                    b.ToTable("ErrorsFP");
                });

            modelBuilder.Entity("Tennis.Models.ErrorsSP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("SecondPlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("game")
                        .HasColumnType("int");

                    b.Property<int>("point")
                        .HasColumnType("int");

                    b.Property<int?>("set")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecondPlayerId");

                    b.ToTable("ErrorsSP");
                });

            modelBuilder.Entity("Tennis.Models.FirstPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("FirstPlayer");
                });

            modelBuilder.Entity("Tennis.Models.ListError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("ListError");
                });

            modelBuilder.Entity("Tennis.Models.LoginForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LoginForm");
                });

            modelBuilder.Entity("Tennis.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("Tennis.Models.MatchDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Event")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("opponentPlayer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("yourPlayer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchDetails");
                });

            modelBuilder.Entity("Tennis.Models.pointListFP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ErrorsFPId")
                        .HasColumnType("int");

                    b.Property<string>("NetError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fSerror")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("point")
                        .HasColumnType("int");

                    b.Property<string>("rPOError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sPOError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sSError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uErrorA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("winner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("winnerA")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ErrorsFPId");

                    b.ToTable("pointListFP");
                });

            modelBuilder.Entity("Tennis.Models.pointListSP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ErrorsSPId")
                        .HasColumnType("int");

                    b.Property<string>("NetError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("fSerror")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("point")
                        .HasColumnType("int");

                    b.Property<string>("sSerror")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("winner")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ErrorsSPId");

                    b.ToTable("pointListSP");
                });

            modelBuilder.Entity("Tennis.Models.RegistrationForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("comparePassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("RegistrationForm");
                });

            modelBuilder.Entity("Tennis.Models.ReportStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstPlayer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MatId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("SecondPlayer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UEPerc")
                        .HasColumnType("float");

                    b.Property<double>("UEPercOP")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("doubleFaults")
                        .HasColumnType("float");

                    b.Property<double>("fServeIN")
                        .HasColumnType("float");

                    b.Property<double>("fServeINOP")
                        .HasColumnType("float");

                    b.Property<double>("fServeOUT")
                        .HasColumnType("float");

                    b.Property<double>("fServeOUTOP")
                        .HasColumnType("float");

                    b.Property<double>("fServePerc")
                        .HasColumnType("float");

                    b.Property<double>("fServePercOP")
                        .HasColumnType("float");

                    b.Property<double>("fb")
                        .HasColumnType("float");

                    b.Property<double>("ft")
                        .HasColumnType("float");

                    b.Property<double>("fw")
                        .HasColumnType("float");

                    b.Property<double>("netError")
                        .HasColumnType("float");

                    b.Property<double>("netErrorOP")
                        .HasColumnType("float");

                    b.Property<double>("netErrorPerc")
                        .HasColumnType("float");

                    b.Property<double>("netErrorPercOP")
                        .HasColumnType("float");

                    b.Property<double>("rpoeb")
                        .HasColumnType("float");

                    b.Property<double>("rpoef")
                        .HasColumnType("float");

                    b.Property<double>("rpowb")
                        .HasColumnType("float");

                    b.Property<double>("rpowf")
                        .HasColumnType("float");

                    b.Property<double>("sServeIN")
                        .HasColumnType("float");

                    b.Property<double>("sServeINOP")
                        .HasColumnType("float");

                    b.Property<double>("sServeOUT")
                        .HasColumnType("float");

                    b.Property<double>("sServePerc")
                        .HasColumnType("float");

                    b.Property<double>("sServePercOP")
                        .HasColumnType("float");

                    b.Property<double>("sb")
                        .HasColumnType("float");

                    b.Property<double>("spoeb")
                        .HasColumnType("float");

                    b.Property<double>("spoef")
                        .HasColumnType("float");

                    b.Property<double>("spowb")
                        .HasColumnType("float");

                    b.Property<double>("spowf")
                        .HasColumnType("float");

                    b.Property<double>("st")
                        .HasColumnType("float");

                    b.Property<double>("sw")
                        .HasColumnType("float");

                    b.Property<double>("totalUE")
                        .HasColumnType("float");

                    b.Property<double>("totalUEOP")
                        .HasColumnType("float");

                    b.Property<double>("totalWinner")
                        .HasColumnType("float");

                    b.Property<double>("totalWinnerOP")
                        .HasColumnType("float");

                    b.Property<double>("ueBHI")
                        .HasColumnType("float");

                    b.Property<double>("ueBHN")
                        .HasColumnType("float");

                    b.Property<double>("ueBHO")
                        .HasColumnType("float");

                    b.Property<double>("ueFHI")
                        .HasColumnType("float");

                    b.Property<double>("ueFHN")
                        .HasColumnType("float");

                    b.Property<double>("ueFHO")
                        .HasColumnType("float");

                    b.Property<double>("winnerBHI")
                        .HasColumnType("float");

                    b.Property<double>("winnerBHN")
                        .HasColumnType("float");

                    b.Property<double>("winnerBHO")
                        .HasColumnType("float");

                    b.Property<double>("winnerFHI")
                        .HasColumnType("float");

                    b.Property<double>("winnerFHN")
                        .HasColumnType("float");

                    b.Property<double>("winnerFHO")
                        .HasColumnType("float");

                    b.Property<double>("winnerPerc")
                        .HasColumnType("float");

                    b.Property<double>("winnerPercOP")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("ReportStats");
                });

            modelBuilder.Entity("Tennis.Models.SecondPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("SecondPlayer");
                });

            modelBuilder.Entity("Tennis.Models.UserProfile", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("UserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tennis.Models.CheckBoxModel", b =>
                {
                    b.HasOne("Tennis.Models.ListError", null)
                        .WithMany("NetError")
                        .HasForeignKey("ListErrorId");

                    b.HasOne("Tennis.Models.ListError", null)
                        .WithMany("NetErrorOP")
                        .HasForeignKey("ListErrorId1");

                    b.HasOne("Tennis.Models.ListError", null)
                        .WithMany("sServe")
                        .HasForeignKey("ListErrorId10");

                    b.HasOne("Tennis.Models.ListError", null)
                        .WithMany("ReturnplusOneWEFB")
                        .HasForeignKey("ListErrorId2");

                    b.HasOne("Tennis.Models.ListError", null)
                        .WithMany("ServeWBT")
                        .HasForeignKey("ListErrorId3");

                    b.HasOne("Tennis.Models.ListError", null)
                        .WithMany("ServeplusOneWEFB")
                        .HasForeignKey("ListErrorId4");

                    b.HasOne("Tennis.Models.ListError", null)
                        .WithMany("UEFB")
                        .HasForeignKey("ListErrorId5");

                    b.HasOne("Tennis.Models.ListError", null)
                        .WithMany("WinnerFBH")
                        .HasForeignKey("ListErrorId6");

                    b.HasOne("Tennis.Models.ListError", null)
                        .WithMany("opUE")
                        .HasForeignKey("ListErrorId7");

                    b.HasOne("Tennis.Models.ListError", null)
                        .WithMany("opWinner")
                        .HasForeignKey("ListErrorId8");

                    b.HasOne("Tennis.Models.ListError", null)
                        .WithMany("opsServe")
                        .HasForeignKey("ListErrorId9");
                });

            modelBuilder.Entity("Tennis.Models.ErrorsFP", b =>
                {
                    b.HasOne("Tennis.Models.FirstPlayer", null)
                        .WithMany("errorList")
                        .HasForeignKey("FirstPlayerId");
                });

            modelBuilder.Entity("Tennis.Models.ErrorsSP", b =>
                {
                    b.HasOne("Tennis.Models.SecondPlayer", null)
                        .WithMany("errorList")
                        .HasForeignKey("SecondPlayerId");
                });

            modelBuilder.Entity("Tennis.Models.FirstPlayer", b =>
                {
                    b.HasOne("Tennis.Models.Match", null)
                        .WithMany("FirstPlayer")
                        .HasForeignKey("MatchId");
                });

            modelBuilder.Entity("Tennis.Models.Match", b =>
                {
                    b.HasOne("Tennis.Models.UserProfile", null)
                        .WithMany("Match")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("Tennis.Models.MatchDetails", b =>
                {
                    b.HasOne("Tennis.Models.Match", null)
                        .WithMany("MatchDetails")
                        .HasForeignKey("MatchId");
                });

            modelBuilder.Entity("Tennis.Models.pointListFP", b =>
                {
                    b.HasOne("Tennis.Models.ErrorsFP", null)
                        .WithMany("pointList")
                        .HasForeignKey("ErrorsFPId");
                });

            modelBuilder.Entity("Tennis.Models.pointListSP", b =>
                {
                    b.HasOne("Tennis.Models.ErrorsSP", null)
                        .WithMany("pointListSP")
                        .HasForeignKey("ErrorsSPId");
                });

            modelBuilder.Entity("Tennis.Models.ReportStats", b =>
                {
                    b.HasOne("Tennis.Models.Match", null)
                        .WithMany("ReportStats")
                        .HasForeignKey("MatchId");
                });

            modelBuilder.Entity("Tennis.Models.SecondPlayer", b =>
                {
                    b.HasOne("Tennis.Models.Match", null)
                        .WithMany("SecondPlayer")
                        .HasForeignKey("MatchId");
                });

            modelBuilder.Entity("Tennis.Models.ErrorsFP", b =>
                {
                    b.Navigation("pointList");
                });

            modelBuilder.Entity("Tennis.Models.ErrorsSP", b =>
                {
                    b.Navigation("pointListSP");
                });

            modelBuilder.Entity("Tennis.Models.FirstPlayer", b =>
                {
                    b.Navigation("errorList");
                });

            modelBuilder.Entity("Tennis.Models.ListError", b =>
                {
                    b.Navigation("NetError");

                    b.Navigation("NetErrorOP");

                    b.Navigation("ReturnplusOneWEFB");

                    b.Navigation("ServeWBT");

                    b.Navigation("ServeplusOneWEFB");

                    b.Navigation("UEFB");

                    b.Navigation("WinnerFBH");

                    b.Navigation("opUE");

                    b.Navigation("opWinner");

                    b.Navigation("opsServe");

                    b.Navigation("sServe");
                });

            modelBuilder.Entity("Tennis.Models.Match", b =>
                {
                    b.Navigation("FirstPlayer");

                    b.Navigation("MatchDetails");

                    b.Navigation("ReportStats");

                    b.Navigation("SecondPlayer");
                });

            modelBuilder.Entity("Tennis.Models.SecondPlayer", b =>
                {
                    b.Navigation("errorList");
                });

            modelBuilder.Entity("Tennis.Models.UserProfile", b =>
                {
                    b.Navigation("Match");
                });
#pragma warning restore 612, 618
        }
    }
}
